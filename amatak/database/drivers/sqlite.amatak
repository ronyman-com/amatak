from amatak.database.drivers.base_driver import BaseDriver
import sqlite3
from typing import List, Dict, Optional

class SQLiteDriver(BaseDriver):
    def __init__(self):
        self.conn = None
        self._is_connected = False
    
    def connect(self, db_path: str = ":memory:", **kwargs) -> bool:
        try:
            self.conn = sqlite3.connect(db_path)
            self.conn.row_factory = sqlite3.Row
            self._is_connected = True
            return True
        except Exception as e:
            self._is_connected = False
            raise Exception(f"SQLite connection failed: {str(e)}")
    
    def execute(self, query: str, params: Optional[List] = None) -> List[Dict]:
        if not self._is_connected:
            raise Exception("Database not connected")
        
        try:
            cursor = self.conn.cursor()
            params = params or []
            cursor.execute(query, params)
            
            if query.lstrip().upper().startswith("SELECT"):
                return [dict(row) for row in cursor.fetchall()]
            
            self.conn.commit()
            return []
        except Exception as e:
            self.conn.rollback()
            raise Exception(f"SQLite query failed: {str(e)}")
    
    def disconnect(self) -> bool:
        if self.conn and self._is_connected:
            try:
                self.conn.close()
                self._is_connected = False
                return True
            except Exception as e:
                raise Exception(f"SQLite disconnection failed: {str(e)}")
        return False
    
    def is_connected(self) -> bool:
        return self._is_connected